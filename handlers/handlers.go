package handlers

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"strings"
	"sync"
	"time"

	"dashka-homework-bot/logger"
	"dashka-homework-bot/storage/mongo"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Handler struct {
	bot             *tgbotapi.BotAPI
	db              *mongo.HomeworkDatabase
	mediaGroups     map[string]string
	mediaGroupsLock sync.Mutex
	lastCleanup     time.Time
}

func NewHandler(bot *tgbotapi.BotAPI, db *mongo.HomeworkDatabase) *Handler {
	return &Handler{
		bot:         bot,
		db:          db,
		mediaGroups: make(map[string]string),
		lastCleanup: time.Now(),
	}
}

func getNextDayName() string {
	tomorrow := time.Now().Add(24 * time.Hour)
	return tomorrow.Weekday().String()
}

func (h *Handler) HandleCommand(message *tgbotapi.Message) {
	// Ensure user is initialized before processing any command
	userID := fmt.Sprintf("%d", message.From.ID)
	username := message.From.UserName

	ctx := context.Background()
	if err := h.ensureUserInitialized(ctx, userID, username); err != nil {
		logger.Error("Error initializing user %s: %v", userID, err)
		h.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
		return
	}

	switch message.Command() {
	case "start":
		nextDay := getNextDayName()
		msg := tgbotapi.NewMessage(message.Chat.ID,
			fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π!\n\n"+
				"–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (%s):\n"+
				"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∏–º–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏\n"+
				"–ü—Ä–∏–º–µ—Ä: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'\n\n"+
				"2. –†–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/addstudent @username`.\n"+
				"3. –†–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/checkhw`.\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.", nextDay))
		h.bot.Send(msg)
	case "help":
		helpText := "üìö *–ü–æ–º–æ—â—å –ø–æ –ë–æ—Ç—É –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π*\n\n" +
			"–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
			"*/start* - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n" +
			"*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é.\n" +
			"*/addstudent @username* - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π).\n" +
			"*/checkhw* - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π).\n" +
			"*/schedule* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n\n" +
			"–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É:\n" +
			"1. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ(—Å–Ω–∏–º–∫–∏) –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n" +
			"2. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞').\n" +
			"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ(—Å–Ω–∏–º–∫–∏) –±–æ—Ç—É.\n\n" +
			"–ü—Ä–∏–º–µ—Ä: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ."
		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown" // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
		h.bot.Send(msg)
	case "schedule":
		// Get schedule for specific user
		ctx := context.Background()
		nextDay := getNextDayName()
		schedule, err := h.db.GetScheduleForDay(ctx, userID, nextDay)
		if err != nil {
			logger.Error("Error getting schedule for user %s: %v", userID, err)
			h.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
			return
		}

		scheduleText := fmt.Sprintf("–ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ (%s) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n", nextDay)
		for i, subject := range schedule.Subjects {
			scheduleText += fmt.Sprintf("%d. %s\n", i+1, subject.SubjectName)
		}
		msg := tgbotapi.NewMessage(message.Chat.ID, scheduleText)
		h.bot.Send(msg)
	case "addstudent":
		h.handleAddStudent(message)
	case "checkhw":
		h.handleCheckHomework(message)
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")
		h.bot.Send(msg)
	}
}

func (h *Handler) HandleMessage(message *tgbotapi.Message) {
	h.cleanupMediaGroups()

	// Ensure user is initialized
	userID := fmt.Sprintf("%d", message.From.ID)
	username := message.From.UserName

	ctx := context.Background()
	if err := h.ensureUserInitialized(ctx, userID, username); err != nil {
		logger.Error("Error initializing user %s: %v", userID, err)
		h.sendMessage(message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if message.Photo == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∏–º–∫–∏ –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞.")
		h.bot.Send(msg)
		return
	}

	caption := message.Caption
	if caption == "" && message.MediaGroupID != "" {
		h.mediaGroupsLock.Lock()
		caption = h.mediaGroups[message.MediaGroupID]
		h.mediaGroupsLock.Unlock()
	}

	if message.MediaGroupID != "" && message.Caption != "" {
		h.mediaGroupsLock.Lock()
		h.mediaGroups[message.MediaGroupID] = message.Caption
		h.mediaGroupsLock.Unlock()
	}

	if caption == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')")
		h.bot.Send(msg)
		return
	}

	nextDay := getNextDayName()
	subject := strings.Title(caption)

	if message.MediaGroupID == "" || message.Caption != "" {
		processingMsg := tgbotapi.NewMessage(message.Chat.ID,
			fmt.Sprintf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è %s %s...", nextDay, subject))
		h.bot.Send(processingMsg)
	}

	photoSize := message.Photo[len(message.Photo)-1]

	file, err := h.bot.GetFile(tgbotapi.FileConfig{FileID: photoSize.FileID})
	if err != nil {
		logger.Error("Error getting file: %v", err)
		if message.MediaGroupID == "" {
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
			h.bot.Send(msg)
		}
		return
	}

	photoBytes, err := downloadFile(file.Link(h.bot.Token))
	if err != nil {
		logger.Error("Error downloading file: %v", err)
		if message.MediaGroupID == "" {
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
			h.bot.Send(msg)
		}
		return
	}

	// Updated to include userID in SaveHomework call
	homeworkID, err := h.db.SaveHomework(
		context.Background(),
		userID,
		nextDay,
		subject,
		photoBytes,
	)
	if err != nil {
		logger.Error("Error saving homework: %v", err)
		if message.MediaGroupID == "" {
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
			h.bot.Send(msg)
		}
		return
	}

	logger.Info("Saved homework with ID: %s for user: %s", homeworkID, userID)

	if message.MediaGroupID == "" || message.Caption != "" {
		msg := tgbotapi.NewMessage(message.Chat.ID,
			fmt.Sprintf("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –¥–æ–º–∞—à–∫—É –¥–ª—è %s %s!", nextDay, subject))
		h.bot.Send(msg)
	}
}

func (h *Handler) SetBotCommands() error {
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"},
		{Command: "help", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é"},
		{Command: "addstudent", Description: "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)"},
		{Command: "checkhw", Description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)"},
		{Command: "schedule", Description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"},
	}

	config := tgbotapi.NewSetMyCommands(commands...)
	_, err := h.bot.Request(config)
	return err
}

// New helper function to ensure user is initialized
func (h *Handler) ensureUserInitialized(ctx context.Context, userID, username string) error {
	// Create user (this should be idempotent)
	err := h.db.CreateUser(ctx, userID, username)
	if err != nil {
		logger.Error("Error creating user %s: %v", userID, err)
		// Continue anyway as the user might already exist
	}

	// Initialize schedule (this should be idempotent)
	err = h.db.InitializeSchedule(ctx, userID)
	if err != nil {
		return fmt.Errorf("failed to initialize schedule: %w", err)
	}

	return nil
}

// Existing helper functions remain the same
func (h *Handler) cleanupMediaGroups() {
	if time.Since(h.lastCleanup) < time.Hour {
		return
	}

	h.mediaGroupsLock.Lock()
	defer h.mediaGroupsLock.Unlock()

	h.mediaGroups = make(map[string]string)
	h.lastCleanup = time.Now()
}

func downloadFile(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	return io.ReadAll(resp.Body)
}

func (h *Handler) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := h.bot.Send(msg); err != nil {
		logger.Error("Error sending message: %v", err)
	}
}
